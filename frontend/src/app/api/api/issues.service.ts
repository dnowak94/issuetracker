/**
 * Issuetracker - OpenAPI 3.0.3
 * Some useful links: - [The Issuetracker repository](https://github.com/swagger-api/swagger-projectstore) - [The source API definition for the projects service](https://github.com/dnowak94/issuetracker/blob/master/backend/openapi.yaml)
 *
 * OpenAPI spec version: 1.0.11
 * Contact: dnowak94@live.de
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Issue } from '../model/issue';
import { IssueStatus } from '../model/issueStatus';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class IssuesService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Create an issue for a project
     * Create a new issue for a project
     * @param projectId ID of project to get issues from
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createIssue(projectId: number, body?: Issue, observe?: 'body', reportProgress?: boolean): Observable<Issue>;
    public createIssue(projectId: number, body?: Issue, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Issue>>;
    public createIssue(projectId: number, body?: Issue, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Issue>>;
    public createIssue(projectId: number, body?: Issue, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling createIssue.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Issue>('post',`${this.basePath}/projects/${encodeURIComponent(String(projectId))}/issues`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete issue by ID
     * 
     * @param projectId ID of the issue that needs to be deleted
     * @param issueId ID of the issue that needs to be deleted
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteIssue(projectId: number, issueId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteIssue(projectId: number, issueId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteIssue(projectId: number, issueId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteIssue(projectId: number, issueId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling deleteIssue.');
        }

        if (issueId === null || issueId === undefined) {
            throw new Error('Required parameter issueId was null or undefined when calling deleteIssue.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/projects/${encodeURIComponent(String(projectId))}/issues/${encodeURIComponent(String(issueId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * get issue by id
     * 
     * @param projectId ID of the project
     * @param issueId ID of the issue
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIssue(projectId: number, issueId: number, observe?: 'body', reportProgress?: boolean): Observable<Issue>;
    public getIssue(projectId: number, issueId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Issue>>;
    public getIssue(projectId: number, issueId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Issue>>;
    public getIssue(projectId: number, issueId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getIssue.');
        }

        if (issueId === null || issueId === undefined) {
            throw new Error('Required parameter issueId was null or undefined when calling getIssue.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Issue>('get',`${this.basePath}/projects/${encodeURIComponent(String(projectId))}/issues/${encodeURIComponent(String(issueId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * lists all issues of the project with the specified id
     * 
     * @param projectId ID of project to get issues from
     * @param status can be used to filter by issue status
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getIssues(projectId: number, status?: IssueStatus, observe?: 'body', reportProgress?: boolean): Observable<Array<Issue>>;
    public getIssues(projectId: number, status?: IssueStatus, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Issue>>>;
    public getIssues(projectId: number, status?: IssueStatus, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Issue>>>;
    public getIssues(projectId: number, status?: IssueStatus, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling getIssues.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Issue>>('get',`${this.basePath}/projects/${encodeURIComponent(String(projectId))}/issues`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * update issue information
     * 
     * @param projectId ID of the project
     * @param issueId ID of the issue
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateIssue(projectId: number, issueId: number, body?: Issue, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateIssue(projectId: number, issueId: number, body?: Issue, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateIssue(projectId: number, issueId: number, body?: Issue, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateIssue(projectId: number, issueId: number, body?: Issue, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (projectId === null || projectId === undefined) {
            throw new Error('Required parameter projectId was null or undefined when calling updateIssue.');
        }

        if (issueId === null || issueId === undefined) {
            throw new Error('Required parameter issueId was null or undefined when calling updateIssue.');
        }


        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/projects/${encodeURIComponent(String(projectId))}/issues/${encodeURIComponent(String(issueId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
